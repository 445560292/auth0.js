#!/usr/bin/env node

var fs = require('fs');
var read = fs.readFileSync;
var write = fs.writeFileSync;
var exec = require('child_process').exec;

var change = process.argv.pop();
var pkg_file = __dirname + '/../package.json';

var pkg = JSON.parse(read(pkg_file, 'utf8'));

var version = pkg.version.split('.').map(function (d) {
  return parseInt(d, 10);
});

switch (change) {
  case 'patch':
    version[2]++;
    break;
  case 'minor':
    version[2] = 0;
    version[1]++;
    break;
  case 'major':
    version[2] = 0;
    version[1] = 0;
    version[0]++;
    break;
  default:
    console.error('unknown option ' + change);
    console.error('options are: patch, minor, major');
    return process.exit(1);
}

var version_string = version.join('.');

/**
 * Start sequence by checking outdated dependencies
 */

checkoutdated();

/**
 * Check for outdated deps before releasing
 */

function checkoutdated() {
  var outdated = exec('grunt outdated', onoutdated);
  outdated.stdout.pipe(process.stdout);
  outdated.stderr.pipe(process.stderr);

  function onoutdated(err) {
    if (!err) return bump();
    return process.exit(1);
  }
}

/**
 * Bump version in package.json
 */

function bump() {
  console.log('Version is now', version_string);
  pkg.version = version_string;
  write(pkg_file, JSON.stringify(pkg, null, 2));
  build();
}

/**
 * Run build task with latest changes
 */

function build() {
  var build = exec('grunt build', onbuild);
  build.stdout.pipe(process.stdout);
  build.stderr.pipe(process.stderr);

  function onbuild(err) {
    if (!err) return gitrelease();
    return process.exit(1);
  }
}

/**
 * Release to github
 */

function gitrelease() {
  var command = 'git commit -am "'
    + version_string
    + '" && git tag -a v'
    + version_string
    + ' -m "'
    + version_string
    + '"';

  var commit = exec(command, oncommit);
  commit.stdout.pipe(process.stdout);
  commit.stderr.pipe(process.stderr);

  function oncommit(err) {
    if (!err) return process.exit(0);
    return process.exit(1);
  }
}
