#!/usr/bin/env node

var exec = require('child_process').exec;
var fs = require('fs');
var path = require('path');

function saveconfig (callback) {
  var config_file = path.join(process.env.HOME, '.browserstack/browserstack.json');
  var config = JSON.stringify({
    "username":   process.env.BROWSERSTACK_USERNAME,
    "password":   process.env.BROWSERSTACK_PASSWORD,
    "privateKey": process.env.BROWSERSTACK_KEY,
    "apiKey":     process.env.BROWSERSTACK_KEY
  });
  fs.writeFile(config_file, config, callback);
}

function execute (cmd) {
  return function (callback) {
    return exec(cmd, callback);
  };
}

var cmds = [
  execute("rm -rf ~/.browserstack && mkdir ~/.browserstack"),
  execute("curl --silent -o ~/.browserstack/BrowserStackTunnel.jar http://www.browserstack.com/BrowserStackTunnel.jar"),
  saveconfig,
  execute("cp ~/.browserstack/browserstack.json ~/browserstack.json"),
  execute("browserstack tunnel localhost:$PORT"),
];

var running_procs = [];

function run () {
  var cmd = cmds.shift();
  var proc = cmd(function (err) {
    if (err) {
      console.log(err.message);
      return process.exit(0);
    }
    run();
  });

  if (proc && proc.stdout) {
    running_procs.push(proc);
    proc.stdout.pipe(process.stdout);
    proc.stderr.pipe(process.stderr);
  }
}

run();

function remove_bs_dir () {
  var rimraf = require('rimraf');
  rimraf.sync(path.join(process.env.HOME, '.browserstack'));
}

process.on('SIGTERM', function () {
  running_procs.forEach(function (proc) {
    proc.kill();
  });
  remove_bs_dir();
});

process.on('SIGINT', remove_bs_dir);